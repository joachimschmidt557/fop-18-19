;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname H10_3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
(define-struct queen (x y))

;; Type: queen (list of queen) -> boolean
;; Returns: true if a queen can be attacked by a list of other queens
;; example: (under-attack (make-queen 1 1) (list (make-queen 1 2))) is true
(define (under-attack new-queen queens)
  (cond
    [(empty? queens) false]
    [else
     (or
      ;; queens on same row
      (= (queen-x new-queen) (queen-x (first queens)))
      ;; queens on same col
      (= (queen-y new-queen) (queen-y (first queens)))
      ;; queens on same diagonal
      (= (abs (- (queen-x new-queen) (queen-x (first queens))))
         (abs (- (queen-y new-queen) (queen-y (first queens)))))
      ;; next queen
      (under-attack new-queen (rest queens)))]))


;; Type: number -> number
;; Returns: the number of solutions of the n-queens problem for board size nxn
(define (n-queens n) 0)

(check-expect (n-queens 8) 92)
